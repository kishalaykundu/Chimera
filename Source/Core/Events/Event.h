/**
 * @file Event.h
 * @author Kishalay Kundu <kishalay.kundu@gmail.com>
 * @section LICENSE
 * See LICENSE.txt included in this package
 *
 * @section DESCRIPTION
 * The interface to an event in the Chimera system. This is further
 * defined by derived classes for specific event types. Note that the
 * driver/app layer should have access to all types of events that can
 * be generated by the whole system.
 */
#pragma once

#include "Assets/Asset.h"

namespace Sim {

	typedef enum {
		EVENT_INTERSECTION,
		EVENT_PHYSICS,
		EVENT_COLLISION,
		EVENT_RENDER,
		EVENT_INVALID
	} EventType;

	class Event {

		public:
			unsigned int _assetId;
			EventType _eventId;

		public:
			Event (): _assetId (0), _eventId (EVENT_INVALID) {}
			Event (unsigned int id, EventType ev): _assetId (id), _eventId (ev) {}
			~Event () {}
			inline EventType GetEventType () const {return _eventId;}
			inline unsigned int GetAssetId () const {return _assetId;}
	};
}

